type: edu
custom_name: stage6
files:
- name: test/tests/ApiTester.java
  visible: false
  text: |
    package tests;

    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import com.google.gson.JsonElement;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import static java.lang.Math.abs;

    public class ApiTester {

        private static void checkJson(
            boolean passed,
            HttpResp resp,
            JsonElement json,
            String path,
            String should) {

            if (!passed) {
                if (path.length() != 0) {
                    path = " in the JSON in path \"" + path + "\"";
                }
                throw new WrongAnswer(
                    resp.getRequest() + " should " + should + path +
                        ".\nFound: \n\n" + getPrettyJson(json)
                );
            }
        }

        static String getPrettyJson(JsonElement json) {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(json);
        }


        // ========== Object

        static void checkIsObject(HttpResp resp, JsonElement json) {
            checkIsObject(resp, json, "");
        }

        static void checkIsObject(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonObject(), resp, json, path, "contain a JSON object");
        }


        // ========== Array

        static void checkIsArray(HttpResp resp, JsonElement json) {
            checkIsArray(resp, json, "");
        }

        static void checkIsArray(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonArray(), resp, json, path, "contain a JSON array");
        }


        // ========== Null

        static void checkIsNull(HttpResp resp, JsonElement json) {
            checkIsNull(resp, json, "");
        }

        static void checkIsNull(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonNull(), resp, json, path, "be equal to a null");
        }


        // ========== String

        static void checkIsString(HttpResp resp, JsonElement json) {
            checkIsString(resp, json, "");
        }

        static void checkIsString(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonPrimitive() && json.getAsJsonPrimitive().isString(),
                resp, json, path, "contain a string");
        }

        static void checkStringValue(HttpResp resp, JsonElement json, String value, String path) {
            checkIsString(resp, json, path);
            checkJson(json.getAsString().equals(value), resp, json, path, "be equal to \"" + value + "\"");
        }


        // ========== Boolean

        static void checkIsBoolean(HttpResp resp, JsonElement json) {
            checkIsBoolean(resp, json, "");
        }

        static void checkIsBoolean(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonPrimitive() && json.getAsJsonPrimitive().isBoolean(),
                resp, json, path, "contain a boolean");
        }

        static void checkBooleanValue(HttpResp resp, JsonElement json, boolean value, String path) {
            checkIsBoolean(resp, json, path);
            checkJson(json.getAsBoolean() == value, resp, json, path, "be equal to " + value);
        }


        // ========== Int

        static void checkIsInt(HttpResp resp, JsonElement json) {
            checkIsInt(resp, json, "");
        }

        static void checkIsInt(HttpResp resp, JsonElement json, String path) {
            try {
                json.getAsInt();
            } catch (NumberFormatException ex) {
                checkJson(false, resp, json, path,"contain a number");
            }
        }

        static void checkIntValue(HttpResp resp, JsonElement json, int value, String path) {
            checkIsInt(resp, json, path);
            checkJson(json.getAsInt() == value, resp, json, path, "be equal to " + value);
        }


        // ========= Double

        static void checkIsDouble(HttpResp resp, JsonElement json) {
            checkIsDouble(resp, json, "");
        }

        static void checkIsDouble(HttpResp resp, JsonElement json, String path) {
            try {
                json.getAsDouble();
            } catch (NumberFormatException ex) {
                checkJson(false, resp, json, path,"contain a floating-point number");
            }
        }

        static void checkDoubleValue(HttpResp resp, JsonElement json, double value, String path) {
            checkIsDouble(resp, json, path);
            checkJson(abs(json.getAsDouble() - value) < 1e-6, resp, json, path, "be equal to " + value);
        }


        // ========== ObjectKey

        static void checkObjectKey(HttpResp resp, JsonElement json, String key) {
            checkObjectKey(resp, json, key, "");
        }

        static void checkObjectKey(HttpResp resp, JsonElement json, String key, String path) {
            checkIsObject(resp, json, path);
            checkJson(json.getAsJsonObject().has(key),
                resp, json, path, "contain a key \"" + key + "\" in object");
        }


        // ========== ArrayLength

        static void checkArrayLength(HttpResp resp, JsonElement json, int length) {
            checkArrayLength(resp, json, length, "");
        }

        static void checkArrayLength(HttpResp resp, JsonElement json, int length, String path) {
            checkIsArray(resp, json, path);
            checkJson(json.getAsJsonArray().size() == length,
                resp, json, path, "contain a JSON array with length " + length);
        }

    }
  learner_created: false
- name: test/tests/TestHelper.java
  visible: false
  text: |
    package tests;

    import com.google.gson.*;
    import org.apache.http.HttpHeaders;
    import org.apache.http.entity.ContentType;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;

    import java.util.Map;

    class HttpResp {
        private String url;
        private String method;
        private HttpResponse resp;

        HttpResp(HttpResponse resp, String url, String method) {
            this.url = url;
            this.resp = resp;
            this.method = method;
        }

        public String getUrl() {
            return url;
        }

        public String getMethod() {
            return method;
        }

        public String getRequest() {
            return getMethod() + " " + getUrl();
        }

        public int getStatusCode() {
            return resp.getStatusCode();
        }

        public Map<String, String> getHeaders() {
            return resp.getHeaders();
        }

        public byte[] getRawContent() {
            return resp.getRawContent();
        }

        public String getContent() {
            return resp.getContent();
        }

        public JsonElement getJson() {
            return resp.getJson();
        }
    }

    public class TestHelper {
        static void checkStatusCode(HttpResp resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkHeader(HttpResp resp, String header, String value) {
            Map<String, String> headers = resp.getHeaders();
            if (!headers.containsKey(header)) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with header \"Content-Type\", " +
                        "but this header is not found in the response."
                );
            }
            String actualValue = headers.get(header);
            if (!actualValue.equals(value)) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with header \"Content-Type\" being " +
                        "equal to " + value + " but in the response header " +
                        "\"Content-Type\" is equal to " + actualValue + "."
                );
            }
        }

        static JsonElement getJson(HttpResp resp) {
            checkHeader(resp,
                HttpHeaders.CONTENT_TYPE,
                ContentType.APPLICATION_JSON.getMimeType()
            );
            try {
                return resp.getJson();
            } catch (Exception ex) {
                throw new WrongAnswer(
                    resp.getRequest() + " should return a valid JSON"
                );
            }
        }

        static JsonElement getJson(String json) {
            return new JsonParser().parse(json);
        }
    }
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.FatalError;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static tests.TestHelper.*;
    import static tests.ApiTester.*;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, 8889, "../quizdb.mv.db");
        }

        private static String quiz1 =
            "{\n" +
            "  \"title\": \"The Java Logo\", \n" +
            "  \"text\": \"What is depicted on the Java logo?\",\n" +
            "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
            "  \"answer\": [2]\n" +
            "}";

        private static String quiz2 =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String quiz3 =
            "{\n" +
            "  \"title\": \"Math1\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
            "  \"answer\": [0,1]\n" +
            "}";

        private static String quiz4 =
            "{\n" +
            "  \"title\": \"Math2\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
            "  \"answer\": [1,3]\n" +
            "}";

        private static String quiz5 =
            "{\n" +
            "  \"title\": \"Math3\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
            "  \"answer\": []\n" +
            "}";

        private static String quiz6 =
            "{\n" +
            "  \"title\": \"Math4\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
            "}";

        private static String quiz7 =
            "{\n" +
            "  \"title\": \"Math5\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
            "  \"answer\": [0,1,3]\n" +
            "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400emptyTitle =
            "{\n" +
            "  \"title\": \"\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400noText =
            "{\n" +
            "  \"title\": \"123123123\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400emptyText =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400noOptions =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"123123123\",\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400emptyOptions =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [ ]\n" +
            "  \"answer\": [ ]\n" +
            "}";

        private static String error400oneOption =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\"]\n" +
            "  \"answer\": [0]\n" +
            "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 0,1),
            () -> testAllQuizzes(0, 0,2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 0,1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 0,2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),
            () -> testCompletedQuizzesNoAuth(),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),
            () -> testCompletedQuizzesFakeAuth(),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 2),


            // Check completed
            () -> testCompletedQuizzes(1, 1, 0 ,0, quizIds[0]),
            () -> testCompletedQuizzes(1, 2, 0, 0, quizIds[1]),


            // Test database save
            () -> testAllQuizzes(2, 0, 1),
            () -> testAllQuizzes(2, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 0,1),
            () -> testAllQuizzes(2, 0,2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 2),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),


            // Check completed
            () -> testCompletedQuizzes(2, 1, 0 ,1, quizIds[0]),
            () -> testCompletedQuizzes(2, 1, 0 ,0, quizIds[1]),

            () -> testCompletedQuizzes(2, 2, 0, 1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 0, 0, quizIds[0]),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 0,2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Check completed
            () -> testCompletedQuizzes(5, 1, 0 ,4, quizIds[0]),
            () -> testCompletedQuizzes(5, 1, 0 ,3, quizIds[1]),
            () -> testCompletedQuizzes(5, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(5, 1, 0 ,1, quizIds[5]),
            () -> testCompletedQuizzes(5, 1, 0 ,0, quizIds[5]),

            () -> testCompletedQuizzes(6, 2, 0, 5, quizIds[1]),
            () -> testCompletedQuizzes(6, 2, 0, 4, quizIds[0]),
            () -> testCompletedQuizzes(6, 2, 0, 3, quizIds[2]),
            () -> testCompletedQuizzes(6, 2, 0, 2, quizIds[3]),
            () -> testCompletedQuizzes(6, 2, 0, 1, quizIds[6]),
            () -> testCompletedQuizzes(6, 2, 0, 0, quizIds[6]),


            // Test pagination completed quizzes
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 1),

            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 2),

            () -> testCompletedQuizzes(10, 1, 0 ,0, quizIds[6]),
            () -> testCompletedQuizzes(10, 1, 0 ,1, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,3, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,4, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,5, quizIds[4]),
            () -> testCompletedQuizzes(1, 1, 1 ,0, quizIds[0]),

            () -> testCompletedQuizzes(10, 2, 0 ,0, quizIds[5]),
            () -> testCompletedQuizzes(10, 2, 0 ,1, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,2, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,3, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,4, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,5, quizIds[3]),
            () -> testCompletedQuizzes(2, 2, 1 ,1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 1 ,0, quizIds[0]),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 0,1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 0,2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),


            // Test pagination all quizzes
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testAllQuizzes(10, 0,1),
            () -> testAllQuizzes(10, 0,2),
            () -> testAllQuizzes(5, 1,1),
            () -> testAllQuizzes(5, 1,2),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpRequest req = post(url, getPrettyJson(json));
            HttpResp resp = new HttpResp(req.send(), url, "POST");

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResp resp = new HttpResp(req.send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResp resp = new HttpResp(auth(req, 3).send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResp resp = new HttpResp(req.send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResp resp = new HttpResp(auth(req, 3).send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResp resp = new HttpResp(get(url).send(), url, "GET");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResp resp = new HttpResp(auth(get(url), 3).send(), url, "GET");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResp resp = new HttpResp(req.send(), url, "DELETE");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResp resp = new HttpResp(auth(req, 3).send(), url, "DELETE");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesNoAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).setGetParam("page", "0");
            HttpResp resp = new HttpResp(req.send(), url + "?page=0", "GET");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesFakeAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).setGetParam("page", "0");
            HttpResp resp = new HttpResp(auth(req, 3).send(), url + "?page=0", "GET");
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "POST");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsObject(resp, json);
            checkObjectKey(resp, json, "id");

            JsonObject obj = json.getAsJsonObject();
            checkIsInt(resp, obj.get("id"), "id");

            quizIds[quizNum] = obj.get("id").getAsInt();

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpRequest req = get(url);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "GET");

            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            JsonElement json = getJson(resp);
            checkIsObject(resp, json);
            checkObjectKey(resp, json, "id");
            checkObjectKey(resp, json, "title");
            checkObjectKey(resp, json, "text");
            checkObjectKey(resp, json, "options");

            JsonObject obj = json.getAsJsonObject();
            checkIsInt(resp, obj.get("id"), "id");
            checkIsString(resp, obj.get("title"), "title");
            checkIsString(resp, obj.get("text"), "text");
            checkIsArray(resp, obj.get("options"), "options");

            checkIntValue(resp, obj.get("id"), quizId, "id");

            if (!rightQuiz.equals(obj)) {
                return CheckResult.wrong(
                    "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(obj)
                );
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);

            HttpRequest req = get(url);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "GET");

            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int page, int user) {
            String url = "/api/quizzes";
            HttpRequest req = get(url).setGetParam("page", "" + page);
            HttpResp resp = new HttpResp(auth(req, user).send(), url + "?page=" + page, "GET");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsObject(resp, json);
            checkObjectKey(resp, json, "content");

            JsonObject obj = json.getAsJsonObject();
            JsonElement contentElem = obj.get("content");

            checkIsArray(resp, contentElem);
            checkArrayLength(resp, contentElem, count, "content");

            JsonArray arr = contentElem.getAsJsonArray();
            int index = 0;
            for (JsonElement elem : arr) {
                String path = "content[" + index + "]";
                checkIsObject(resp, elem, path);
                JsonObject currObj = elem.getAsJsonObject();

                checkObjectKey(resp, currObj, "id", path);
                checkIsInt(resp, currObj.get("id"), path + ".id");

                checkObjectKey(resp, currObj, "title", path);
                checkIsString(resp, currObj.get("title"), path + ".title");

                checkObjectKey(resp, currObj, "text", path);
                checkIsString(resp, currObj.get("text"), path + ".text");

                checkObjectKey(resp, currObj, "options", path);
                checkIsArray(resp, currObj.get("options"), path + ".options");

                ++index;
            }

            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzes(int count, int user, int page, int indexForCheckingQuizId, int quizNum) {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).setGetParam("page", "" + page);
            HttpResp resp = new HttpResp(auth(req, user).send(), url + "?page=" + page, "GET");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsObject(resp, json);
            checkObjectKey(resp, json, "content");

            JsonObject obj = json.getAsJsonObject();
            JsonElement contentElem = obj.get("content");

            checkIsArray(resp, contentElem);
            checkArrayLength(resp, contentElem, count, "content");

            JsonArray arr = contentElem.getAsJsonArray();
            int index = 0;
            for (JsonElement elem : arr) {
                String path = "content[" + index + "]";
                checkIsObject(resp, elem, path);
                JsonObject currObj = elem.getAsJsonObject();

                checkObjectKey(resp, currObj, "id", path);
                checkIsInt(resp, currObj.get("id"), path + ".id");

                checkObjectKey(resp, currObj, "completedAt", path);
                checkIsString(resp, currObj.get("completedAt"), path + ".completedAt");

                if (index == indexForCheckingQuizId) {
                    checkIntValue(resp, currObj.get("id"), quizNum, path + ".id");
                }

                ++index;
            }

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "POST");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsObject(resp, json);
            checkObjectKey(resp, json, "success");
            checkObjectKey(resp, json, "feedback");

            JsonObject obj = json.getAsJsonObject();

            checkIsBoolean(resp, obj.get("success"), "success");
            checkIsString(resp, obj.get("feedback"), "feedback");

            checkBooleanValue(resp, obj.get("success"), shouldResponse, "success");

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "POST");
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "DELETE");
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new FatalError(ex.getMessage(), ex);
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/service/UserService.java
  visible: true
  text: |
    package engine.service;
    import engine.model.User;
    import engine.model.UserImpl;
    import engine.repository.UserRepository;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.stereotype.Service;
    import java.util.Optional;


    @Service
    public class UserService implements UserDetailsService {

        private final UserRepository userRepository;

        private final BCryptPasswordEncoder bCryptPasswordEncoder;

        public UserService(UserRepository userRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {
            this.userRepository = userRepository;
            this.bCryptPasswordEncoder = bCryptPasswordEncoder;
        }

        @Override
        public UserDetails loadUserByUsername(String userEmail) {
            Optional<User> userOptional = Optional.ofNullable(userRepository.findByEmail(userEmail));
            return userOptional.map(UserImpl::new)
                    .orElseThrow(() -> new UsernameNotFoundException("Not found: " + userEmail));
        }

        public User registerUser(User user) {
            Optional<User> userOptional = Optional.ofNullable(userRepository.findByEmail(user.getEmail()));
            if (userOptional.isEmpty()) {
                user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
                return userRepository.save(user);
            }
            return null;
        }

        public UserImpl getUserImpl() {
            return (UserImpl) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        }


    }
  learner_created: true
- name: src/engine/model/Result.java
  visible: true
  text: |-
    package engine.model;
    import lombok.Getter;

    @Getter
    public final class Result {
        private final boolean success;
        private String feedback;

        public static final Result SUCCESS_RESULT = new Result(true);
        public static final Result FAILURE_RESULT = new Result(false);

        public Result(boolean success) {
            this.success = success;
            setFeedback(success);
        }

        private void setFeedback(boolean success) {
            feedback = success ? "Congratulations, you're right!"
                    : "Wrong answer! Please, try again.";
        }
    }
  learner_created: true
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.datasource.url=jdbc:h2:file:../quizdb
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=password

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false
    spring.jpa.show-sql=true
  learner_created: true
- name: src/engine/repository/UserRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.model.User;
    import org.springframework.data.jpa.repository.JpaRepository;

    public interface UserRepository extends JpaRepository<User, Integer> {
        User findByEmail(String email);
        User save(User user);
    }
  learner_created: true
- name: src/engine/model/UserImpl.java
  visible: true
  text: |
    package engine.model;

    import lombok.Getter;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import java.util.Collections;

    @Getter
    public class UserImpl extends org.springframework.security.core.userdetails.User {

        private final long id;

        public UserImpl(User user) {
            super(user.getEmail(), user.getPassword(), Collections.singletonList(new SimpleGrantedAuthority("USER")));
            this.id = user.getId();
        }

        @Override
        public boolean equals(Object rhs) {
            return super.equals(rhs);
        }

        @Override
        public int hashCode() {
            return super.hashCode();
        }
    }
  learner_created: true
- name: src/engine/repository/QuizRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.model.Quiz;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;
    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface QuizRepository extends CrudRepository<Quiz, Long> {
        Quiz findById(long id);
        List<Quiz> findAll();

    }
  learner_created: true
- name: src/engine/config/SecurityConfiguration.java
  visible: true
  text: |
    package engine.config;
    import engine.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

    @EnableWebSecurity
    @Configuration
    class SecurityConfig extends WebSecurityConfigurerAdapter {

        @Autowired
        UserService userService;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userService).passwordEncoder(passwordEncoder());
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable().authorizeRequests()
                    .antMatchers("/api/quizzes/**").hasAuthority("USER")
                    .antMatchers("/actuator/shutdown").permitAll()
                    .antMatchers("/**").permitAll()
                    .and().httpBasic().and().headers().frameOptions().disable();
        }

        @Bean
        public BCryptPasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/engine/model/Answer.java
  visible: true
  text: |
    package engine.model;

    import lombok.Getter;
    import lombok.Setter;

    import java.util.List;

    @Getter
    @Setter
    public class Answer {
        private List<Integer> answer;
    }
  learner_created: true
- name: src/engine/service/QuizService.java
  visible: true
  text: |
    package engine.service;

    import engine.model.Answer;
    import engine.model.Quiz;
    import engine.model.UserImpl;
    import engine.repository.QuizRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    import engine.model.User;
    import org.springframework.web.server.ResponseStatusException;

    @Service
    public class QuizService {

        private final QuizRepository quizRepository;

        private final UserService userService;
        @Autowired

        public QuizService(QuizRepository quizRepository, UserService userService) {
            this.quizRepository = quizRepository;
            this.userService = userService;
        }


        public Quiz getQuizById(final long id) {
            return quizRepository.findById(id);
        }

        public Quiz addQuiz(Quiz quiz) {
            UserImpl userImpl = userService.getUserImpl();
            User user = User.builder()
                    .id(userImpl.getId())
                    .email(userImpl.getUsername())
                    .password(userImpl.getPassword())
                    .build();
            quiz.setUser(user);
            if (quiz.getAnswer() == null) {
                quiz.setAnswer(new ArrayList<>());
            }
            return quizRepository.save(quiz);
        }

        public List<Quiz> getAllQuizzes() {
            return quizRepository.findAll();
        }

        public boolean answerIsCorrect(final Answer answer, final Quiz quiz) {
            return answer.getAnswer().equals(quiz.getAnswer());
        }

        public HttpStatus deleteQuizById(final long id) {
            Optional<Quiz> optionalQuiz = Optional.ofNullable(getQuizById(id));
            if (optionalQuiz.isPresent()) {
                if (optionalQuiz.get().getUser() != null
                        && optionalQuiz.get().getUser().getId() == userService.getUserImpl().getId()) {
                    quizRepository.delete(optionalQuiz.get());
                    return HttpStatus.NO_CONTENT;
                } else {
                    throw new ResponseStatusException(HttpStatus.FORBIDDEN);
                }
            }
            return HttpStatus.NOT_FOUND;
        }
    }
  learner_created: true
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {
        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }
    }
  learner_created: true
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        runtimeOnly 'com.h2database:h2'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    }
  learner_created: true
- name: src/engine/controller/UserController.java
  visible: true
  text: |
    package engine.controller;
    import engine.model.User;
    import engine.service.UserService;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;
    import javax.validation.Valid;
    import java.util.Optional;

    @RestController
    @RequestMapping("/api/register")
    public class UserController {

        private final UserService userDetailsService;

        public UserController(UserService userDetailsService) {
            this.userDetailsService = userDetailsService;
        }

        @PostMapping
        public ResponseEntity<User> authorizeUser(@Valid @RequestBody final User user) {
            Optional<User> userOptional = Optional.ofNullable(userDetailsService.registerUser(user));
            if (userOptional.isPresent()) {
                return new ResponseEntity<>(HttpStatus.OK);
            }
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, String.format("Account with email %s already exists",
                    user.getEmail()));
        }
    }
  learner_created: true
- name: src/engine/model/Quiz.java
  visible: true
  text: |-
    package engine.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.util.List;

    @Getter
    @Setter
    @Entity
    @NoArgsConstructor
    public class Quiz {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        long id;

        @NotBlank
        private String title;

        @NotBlank
        private String text;

        @Size(min = 2)
        @NotNull
        @ElementCollection
        private List<String> options;

        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @ElementCollection
        private List<Integer> answer;
        @ManyToOne
        @JsonIgnore
        private User user;
    }
  learner_created: true
- name: src/engine/controller/QuizController.java
  visible: true
  text: |-
    package engine.controller;

    import engine.model.Answer;
    import engine.model.Quiz;
    import engine.model.Result;
    import engine.service.QuizService;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.*;

    @RestController
    @RequestMapping("/api/quizzes")
    public class QuizController {

        private final QuizService quizService;

        public static final String SERVICE_WARNING_MESSAGE = "QUIZ DOESN'T EXIST WITH ID %d";

        public QuizController(QuizService quizService) {
            this.quizService = quizService;
        }

        @GetMapping
        public ResponseEntity<List<Quiz>> getAllQuizzes() {
            return new ResponseEntity<>(quizService.getAllQuizzes(), HttpStatus.OK);
        }

        @GetMapping(path = "/{id}")
        public ResponseEntity<Quiz> getQuizById(@PathVariable("id") final long id) {
            return Optional.ofNullable(quizService.getQuizById(id))
                    .map(quiz -> ResponseEntity.ok().body(quiz))
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                            String.format(SERVICE_WARNING_MESSAGE, id)));
        }

        @PostMapping
        public ResponseEntity<Quiz> addQuiz(@Valid @RequestBody final Quiz quiz) {
            return new ResponseEntity<>(quizService.addQuiz(quiz), HttpStatus.OK);
        }

        @DeleteMapping(path = "/{id}")
        public ResponseEntity<Quiz> deleteQuiz(@PathVariable("id") final long id) {
            return new ResponseEntity<>(quizService.deleteQuizById(id));
        }

        @PostMapping(path = "/{id}/solve")
        public ResponseEntity<Result> solveQuiz(@RequestBody final Answer answer, @PathVariable final long id) {
            return Optional.ofNullable(quizService.getQuizById(id)).map(quiz -> quizService.answerIsCorrect(answer, quiz)
                    ? ResponseEntity.ok().body(Result.SUCCESS_RESULT)
                    : ResponseEntity.ok().body(Result.FAILURE_RESULT))
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                            String.format(SERVICE_WARNING_MESSAGE, id)));
        }
    }
  learner_created: true
- name: src/engine/model/User.java
  visible: true
  text: |
    package engine.model;
    import lombok.*;

    import javax.persistence.*;
    import javax.validation.constraints.*;
    import java.util.List;

    @Getter
    @Setter
    @NoArgsConstructor
    @Entity
    @Builder
    @AllArgsConstructor
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private long id;
        @NotNull
        @Email(message = "Incorrect format of email")
        @Pattern(regexp = ".+\\..{2,3}", message = "Incorrect format of email")
        private String email;
        @NotBlank
        @Size(min = 5, message = "Number of symbols has not to be less 5")
        private String password;
        @OneToMany(mappedBy = "user")
        private List<Quiz> quizzes;
    }
  learner_created: true
- name: src/engine/model/CompletedQuiz.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/509/implement
status: Unchecked
record: -1
